Dans le cadre de mon stage chez la Société Générale, j'ai été amené à travailler sur plusieurs aspects de l'infrastructure réseau en utilisant des services AWS (Amazon Web Services). Une partie significative de mon travail a consisté à comprendre et à manipuler des transit gateways, un composant clé pour la gestion et l'organisation des réseaux au sein d'AWS. Mon environnement de travail comprenait un ordinateur portable avec des outils essentiels tels que Visual Studio Code (VSCode) pour l'édition de code, GitHub pour la gestion des versions et la collaboration, ainsi qu'un compte AWS qui m'a permis d'interagir directement avec les services cloud.

L'un des défis techniques que j'ai abordés était de documenter et de gérer les informations relatives aux transit gateways et à leurs tables de routage associées. Pour cela, j'ai utilisé plusieurs fonctions Python interagissant avec les API d'AWS. Mon approche consistait à récupérer des données cruciales sur les transit gateways, leurs tables de routage et les attaches réseau, puis à formater et enregistrer ces données dans divers formats pour une utilisation et une analyse ultérieures.

L'un des premiers objectifs de mon code était d'identifier le compte AWS actuel. Pour ce faire, une fonction spécifique interroge le service AWS Security Token Service (STS) pour obtenir l'identifiant du compte utilisateur. Cette étape est cruciale car elle permet de contextualiser toutes les opérations suivantes dans le cadre du compte AWS correct, garantissant ainsi que toutes les informations récupérées sont pertinentes et exactes.

Ensuite, pour chaque transit gateway identifiée dans le compte AWS, j'ai dû localiser ses tables de routage. Les tables de routage sont comme des plans de trafic, indiquant comment les données doivent être acheminées à travers le réseau. En interrogeant le service Amazon EC2 (Elastic Compute Cloud), mon code récupère les détails des tables de routage associées à chaque transit gateway. Si aucune table de routage n'est trouvée pour une gateway particulière, cela est notifié afin que l'équipe puisse prendre les mesures nécessaires.

Une fois les tables de routage identifiées, l'étape suivante consistait à examiner les routes individuelles définies dans ces tables. Chaque route spécifie un bloc d'adresses IP de destination et le type de cible vers laquelle le trafic doit être acheminé. Ces détails sont cruciaux pour comprendre comment le réseau est structuré et comment les données circulent à travers les différentes parties de l'infrastructure AWS.

Un aspect important du travail était de documenter ces informations de manière organisée. Pour ce faire, j'ai créé des fonctions permettant de formater et de sauvegarder les données récupérées dans différents formats : JSON, CSV et Markdown. Le format JSON est particulièrement utile pour des échanges de données structurées entre applications, tandis que les fichiers CSV sont faciles à manipuler dans des tableurs pour une analyse manuelle. Le format Markdown, quant à lui, est idéal pour la documentation textuelle enrichie, facilitant la lecture et l'interprétation des informations.

Un autre concept important que j'ai exploré est celui de "assume role" dans AWS. Pour vulgariser cette notion, imaginez que dans une grande entreprise, chaque employé a un rôle spécifique avec des accès et des permissions définies. Cependant, pour accomplir certaines tâches, un employé peut temporairement adopter le rôle d'un autre employé avec des permissions différentes. Dans AWS, "assume role" permet à une entité (comme un utilisateur ou une application) de prendre temporairement les permissions d'un autre rôle pour accéder aux ressources nécessaires. C'est un mécanisme de sécurité et de gestion des accès très puissant, car il permet de limiter les permissions permanentes et de réduire les risques d'accès non autorisé.

Par exemple, dans le contexte de mon travail, une application lambda pourrait avoir besoin d'accéder temporairement à des ressources spécifiques comme des bases de données ou des services de stockage. En utilisant "assume role", cette application peut obtenir les permissions nécessaires juste pour le temps nécessaire à accomplir la tâche, puis revenir à son état initial sans ces permissions. Cela garantit que les accès sont accordés de manière contrôlée et sécurisée, minimisant ainsi les risques de sécurité.

Enfin, le rapport de ces activités incluait l'évaluation des réussites et des échecs des différentes étapes de traitement. Pour chaque transit gateway, mon code vérifie la réussite des opérations de récupération de données et de génération des fichiers de rapport. En cas d'échec, des messages d'erreur détaillés sont enregistrés, facilitant le débogage et l'amélioration continue des scripts.

Cette expérience m'a permis de développer une compréhension approfondie des infrastructures réseau dans le cloud et de renforcer mes compétences en programmation et en gestion de projets techniques. J'ai également appris l'importance de la documentation et de la communication des résultats de manière claire et structurée, ce qui est essentiel pour le travail collaboratif en environnement professionnel.
