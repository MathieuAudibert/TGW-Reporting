Mon environnement de travail chez la Société Générale a été spécialement aménagé pour faciliter mon immersion dans le monde professionnel et le développement de mes compétences techniques. On m'a fourni un ordinateur portable performant, configuré avec les outils essentiels pour mes tâches quotidiennes. Parmi ces outils, Visual Studio Code (VSCode) a été l'éditeur de code de choix, grâce à sa flexibilité et à ses nombreuses extensions qui facilitent le développement et le débogage. En complément, GitHub a été utilisé pour le contrôle de version et la gestion de mes projets de développement, permettant une collaboration efficace avec les membres de l'équipe grâce aux pull requests et aux git issues. De plus, j'ai eu accès à un compte AWS (Amazon Web Services), ce qui m'a permis d'explorer et de travailler avec une large gamme de services cloud, essentiels pour les projets de transition vers le cloud de la Société Générale. Cet environnement bien équipé et moderne a été crucial pour me permettre de contribuer pleinement aux projets en cours.

Dans ce contexte, une des notions importantes que j'ai apprises à vulgariser est celle du "assume role" dans AWS. Imaginez que vous êtes dans une entreprise avec plusieurs départements, chacun ayant des accès et des responsabilités spécifiques. Parfois, pour accomplir une tâche particulière, vous avez besoin d'accéder aux ressources d'un autre département. Au lieu de donner à chaque employé des accès permanents à tous les départements (ce qui serait compliqué et risqué), l'entreprise met en place un système de badges temporaires. Un employé du département A peut "assumer" le rôle d'un employé du département B, en utilisant ce badge temporaire, pour accéder aux ressources nécessaires, accomplir sa tâche, puis retourner à son rôle d'origine. Dans AWS, "assume role" fonctionne de manière similaire : c'est un mécanisme qui permet à une entité (comme un utilisateur ou un service) de prendre temporairement les permissions d'un autre rôle pour accéder aux ressources dont elle a besoin. Cela renforce la sécurité et la gestion des accès en limitant les permissions permanentes et en permettant des contrôles d'accès plus granulaires et temporaires. Par exemple, un service lambda pourrait assumer un rôle spécifique avec les permissions nécessaires pour lire des données dans un bucket S3, effectuer ses opérations, puis relâcher ce rôle, assurant ainsi que les accès ne sont donnés que lorsque nécessaire et de manière contrôlée.
