import unittest
from unittest.mock import Mock, patch
from pathlib import Path
from typing import Dict, Any, List
import json

# Importer les fonctions à tester
from votre_module import get_caller_identity, get_route_table_id, get_route_tables, get_transit_gateways, to_json, to_csv, read_json_file, generate_markdown

class TestAWSFunctions(unittest.TestCase):
    @patch('boto3.client')
    def test_get_caller_identity(self, mock_boto_client):
        # Configurer le client simulé
        mock_sts_client = Mock()
        mock_sts_client.get_caller_identity.return_value = {'Account': '123456789012'}
        
        # Appeler la fonction avec le client simulé
        account_id = get_caller_identity(mock_sts_client)
        
        # Vérifier les résultats
        self.assertEqual(account_id, '123456789012')
        mock_sts_client.get_caller_identity.assert_called_once()

    @patch('boto3.client')
    def test_get_route_table_id(self, mock_boto_client):
        # Configurer le client simulé
        mock_ec2_client = Mock()
        mock_ec2_client.describe_transit_gateway_route_tables.return_value = {
            'TransitGatewayRouteTables': [{'TransitGatewayRouteTableId': 'tgw-rtb-0123456789abcdef'}]
        }
        
        # Appeler la fonction avec le client simulé
        route_table_id = get_route_table_id('tgw-0123456789abcdef', mock_ec2_client)
        
        # Vérifier les résultats
        self.assertEqual(route_table_id, 'tgw-rtb-0123456789abcdef')
        mock_ec2_client.describe_transit_gateway_route_tables.assert_called_once()

    @patch('boto3.client')
    def test_get_route_tables(self, mock_boto_client):
        # Configurer le client simulé
        mock_ec2_client = Mock()
        mock_ec2_client.describe_transit_gateway_route_tables.return_value = {
            'TransitGatewayRouteTables': [{'TransitGatewayRouteTableId': 'tgw-rtb-0123456789abcdef'}]
        }
        mock_ec2_client.search_transit_gateway_routes.return_value = {
            'Routes': [
                {
                    'DestinationCidrBlock': '10.0.0.0/16',
                    'TargetType': 'vpc',
                    'PrefixListId': 'pl-0123456789abcdef'
                }
            ]
        }
        
        # Appeler la fonction avec le client simulé
        routes = get_route_tables('tgw-0123456789abcdef', mock_ec2_client)
        
        # Vérifier les résultats
        expected_routes = [
            {
                'DestinationCidrBlock': '10.0.0.0/16',
                'TargetType': 'vpc',
                'PrefixList': 'pl-0123456789abcdef'
            }
        ]
        self.assertEqual(routes, expected_routes)
        mock_ec2_client.describe_transit_gateway_route_tables.assert_called_once()
        mock_ec2_client.search_transit_gateway_routes.assert_called_once()

    @patch('boto3.client')
    def test_get_transit_gateways(self, mock_boto_client):
        # Configurer le client simulé
        mock_ec2_client = Mock()
        mock_ec2_client.describe_transit_gateways.return_value = {
            'TransitGateways': [
                {
                    'TransitGatewayId': 'tgw-0123456789abcdef',
                    'OwnerId': '123456789012',
                    'State': 'available'
                }
            ]
        }
        mock_ec2_client.describe_transit_gateway_attachments.return_value = {
            'TransitGatewayAttachments': [
                {
                    'TransitGatewayAttachmentId': 'tgw-attach-0123456789abcdef',
                    'ResourceType': 'vpc',
                    'ResourceOwnerId': '123456789012'
                }
            ]
        }
        mock_ec2_client.search_transit_gateway_routes.return_value = {
            'Routes': [
                {
                    'DestinationCidrBlock': '10.0.0.0/16',
                    'TargetType': 'vpc',
                    'PrefixListId': 'pl-0123456789abcdef'
                }
            ]
        }
        
        # Appeler la fonction avec le client simulé
        transit_gateways = get_transit_gateways(mock_ec2_client)
        
        # Vérifier les résultats
        expected_gateways = {
            'tgw-0123456789abcdef': {
                'Owner': '123456789012',
                'State': 'available',
                'Attachments': [
                    {
                        'AttachmentId': 'tgw-attach-0123456789abcdef',
                        'ResourceType': 'vpc',
                        'Owner': '123456789012',
                        'Routes': [
                            {
                                'DestinationCidrBlock': '10.0.0.0/16',
                                'TargetType': 'vpc',
                                'PrefixList': 'pl-0123456789abcdef'
                            }
                        ]
                    }
                ]
            }
        }
        self.assertEqual(transit_gateways, expected_gateways)
        mock_ec2_client.describe_transit_gateways.assert_called_once()
        mock_ec2_client.describe_transit_gateway_attachments.assert_called_once()
        mock_ec2_client.search_transit_gateway_routes.assert_called_once()

if __name__ == '__main__':
    unittest.main()
